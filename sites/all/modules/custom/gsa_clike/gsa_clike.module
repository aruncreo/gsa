<?php

/**
 * Implementation of hook_init().
 */
function gsa_clike_init() {
  drupal_add_js(drupal_get_path('module', 'gsa_clike') . '/gsa_clike.js');
}

/**
 * Implementation of hook_menu().
 */
function gsa_clike_menu() {
  $items = array();

  $items['like-comment/%'] = array(
    'title' => 'Comments',
    'description' => 'Like comments.',
    'page callback' => 'gsa_clike_like_comment',
    'page arguments' => array(1),
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK,
  );

  $items['unlike-comment/%'] = array(
    'title' => 'Comments',
    'description' => 'Unlike comments.',
    'page callback' => 'gsa_clike_unlike_comment',
    'page arguments' => array(1),
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/clike-settings'] = array(
    'title' => 'GSA Like Comment Settings',
    'page callback' => 'clike_settings',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Implementation of hook_comment_view_alter().
 */
function gsa_clike_comment_view_alter(&$comment) {

  if (user_is_logged_in()) {
    global $user;

    unset($comment['links']['comment']['#links']['comment-edit']);

    if (check_user_likes_comment($user->uid, $comment['#comment']->cid)) {
      $comment['links']['comment']['#links']['comment-like'] = array(
        'title' => t('unlike'),
        'href' => 'unlike-comment/'. $comment['#comment']->cid,
        'html' => 1,
        'attributes' => array('class' => array('comment-like-anchor')),
      );
    }
    else {
      $comment['links']['comment']['#links']['comment-like'] = array(
        'title' => t('like'),
        'href' => 'like-comment/'. $comment['#comment']->cid,
        'html' => 1,
        'attributes' => array('class' => array('comment-like-anchor')),
      );
    }
  }

}

/**
 * Implementation of hook_form_alter().
 */
function gsa_clike_form_alter(&$form, $form_state, $form_id) {
  switch($form['#id']) {
    case 'comment-form':
      break;
  }
}


function check_user_likes_comment($uid, $cid) {
  return db_select('gsa_clike', 'lc')
    ->fields('lc', array('lcid'))
    ->condition('uid', $uid)
    ->condition('cid', $cid)
    ->countQuery()
    ->execute()
    ->fetchField();
}


/**
 * @todo
 * @param unknown_type $uid
 * @param unknown_type $node
 */
function gsa_check_user_likes_node_comment($uid, $node) {
  $comments = comment_get_thread($node, COMMENT_MODE_FLAT, 999999);
  return db_select('gsa_clike', 'lc')
    ->fields('lc', array('lcid'))
    ->condition('uid', $uid)
    ->condition('cid', $cid)
    ->countQuery()
    ->execute()
    ->fetchField();
}


function gsa_clike_list_comment_users($node) {
  $comments = comment_get_thread($node, COMMENT_MODE_FLAT, 999999);
  if (!$comments) return array();

  $like_user_ids = array();

  foreach ($comments AS $cid) {
    $comment = comment_load($cid);

    $like_user_ids[$comment->uid] = isset($like_user_ids[$comment->uid]) ? $like_user_ids[$comment->uid] : 0;
    $like_user_ids[$comment->uid] += 10;

    $like_users_result = db_select('gsa_clike', 'lc')
      ->fields('lc', array('uid'))
      ->condition('cid', $cid)
      ->orderBy('created', 'desc')
      ->execute()
      ->fetchAll();

    foreach ($like_users_result AS $like) {
      $like_user_ids[$like->uid] = isset($like_user_ids[$like->uid]) ? $like_user_ids[$like->uid] : 0;
      $like_user_ids[$like->uid] += 1;
    }
  }

  return $like_user_ids;
}


function gsa_clike_list_comment_likes($node) {
  $comments = comment_get_thread($node, COMMENT_MODE_FLAT, 999999);
  if (!$comments) {
	return array();
  }

  $like_user_ids = array();

  foreach ($comments AS $cid) {
    $comment = comment_load($cid);

    /* $like_user_ids[$comment->uid] = isset($like_user_ids[$comment->uid]) ? $like_user_ids[$comment->uid] : 0;
    $like_user_ids[$comment->uid] += 10; */

    $like_users_result = db_select('gsa_clike', 'lc')
      ->fields('lc', array('uid', 'created'))
      ->condition('cid', $cid)
      ->orderBy('created', 'desc')
      ->execute()
      ->fetchAll();

    foreach ($like_users_result AS $like) {
      $like_user_ids[$cid] = array('uid' => $like->uid, 'created' => $like->created);
    }
  }

  return $like_user_ids;
}


/**
 * Function callback to like comment.
 * @param unknown_type $cid
 */
function gsa_clike_like_comment($cid) {
  $comment = comment_load($cid);

  if (user_is_logged_in() && $comment->cid) {
    global $user;

    if (!check_user_likes_comment($user->uid, $cid)) {
      $lcid = db_insert('gsa_clike')
      ->fields(array(
          'uid' => $user->uid,
          'cid' => $cid,
          'created' => time(),
      ))
      ->execute();
    }

    $comment_node = node_load($comment->nid);

    $data['message_id'] = 'heartbeat_like_comment';
    $data['variables']['!title'] = l($node->title, 'node/'. $comment_node->nid);
    $data['variables']['!username'] = l($user->name, 'user/'. $user->uid);
    $data['nid'] = $comment_node->nid;
    $data['uid'] = $user->uid;
    $data['access'] = HEARTBEAT_PUBLIC_TO_ALL;

    heartbeat_log($data, $data['variables']);

    // sending mail if setting is set to yes for sending mail on like.
    if (variable_get('clike_notify_like', '0') == 1){
      gsa_clike_notify($cid, $user, 'like');
    }

    $return['href'] = url('unlike-comment/'. $cid);
    $return['html'] = t('unlike');
    print json_encode($return);
  }
  exit;
}


/**
 * Function callback to unlike comment.
 * @param unknown_type $cid
 */
function gsa_clike_unlike_comment($cid) {
  if (user_is_logged_in()) {
    global $user;
    db_delete('gsa_clike')
      ->condition('uid', $user->uid)
      ->condition('cid', $cid)
      ->execute();

    // sending mail if setting is set to yes for sending mail on unllike.
    if (variable_get('clike_notify_unlike', '0') == 1){
      gsa_clike_notify($cid, $user, 'unlike');
    }

    $return['href'] = url('like-comment/'. $cid);
    $return['html'] = t('like');
    print json_encode($return);
  }
}

function clike_settings(){
  return drupal_get_form('clike_settings_form');
}

function clike_settings_form($form_state){

  $form['intro'] = array(
    '#markup' => t('Send notifications on:'),
  );

  $form['clike_notify_like'] = array(
    '#type' => 'checkbox',
    '#title' => t('Comment like'),
    '#default_value' => variable_get('clike_notify_like', '0'),
  );

  $form['clike_notify_unlike'] = array(
    '#type' => 'checkbox',
    '#title' => t('Comment unlike'),
    '#default_value' => variable_get('clike_notify_unlike', '0'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_mail().
 */
function gsa_clike_mail($key, &$message, $params) {
  if ($key == 'comment_like' || $key == 'comment_unlike') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
  }
}

/**
 * Implements hook_mail_alter().
 */
function gsa_clike_mail_alter(&$message) {
  if ($message['params']['type'] == 'clike-message') {
    $headers = array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/plain; charset=UTF-8; format=flowed',
      'Content-Transfer-Encoding' => '8Bit',
    );
    foreach ($headers as $key => $value) {
      $message['headers'][$key] = $value;
    }
  }
}

/**
 * Function callback to send a notification.
 *
 * @param $cid
 *   Integer comment ID
 * @param $user
 *   User object of the user who liked/unliked the comment
 * @param $mode
 *   String: 'like' or 'unlike' (defaults to 'like')
 *
 * @todo: Integrate with a notifications system.
 * @todo: Notify users other than the group owner.
 */
function gsa_clike_notify($cid, $user, $mode = 'like') {
  global $language, $base_url;

  $comment = comment_load($cid);
  $node = node_load($comment->nid);
  $group_authors_mail = array();

  foreach ($node->group_audience[LANGUAGE_NONE] as $key => $value){
    $og = og_load($value['gid']);
    $group_node = node_load($og->etid);
    $group_authors = user_load($group_node->uid);
    $group_authors_mail[$value['gid']] = $group_authors->mail;
  }
  
  $category = ($mode == 'like') ? 'comment_like' : 'comment_unlike';

  $action = ($mode == 'like') ? 'likes' : 'unliked';

  $body_message .= $user->name . t(" @action this comment in the group ", array('@action' => $action)) . $group_node->title . ": \n\n";
  $body_message .= $comment->subject;
  $body_message .= "\n\n" . $base_url . url('node/'. $node->nid) ;

  $params['type'] = 'clike-message';
  $params['subject'] = $like_by . t(' @action a comment on Interact', array('@action' => $action ));
  $params['body'] = $body_message; 

  foreach ($group_authors_mail as $kk => $vv){
    $author_mail = $vv;
    drupal_mail('gsa_clike', $category, $author_mail, $language, $params);
  }

}

