<?php
/*
 * $Id: gsa_follow.module 182 2012-08-23 17:38:45Z nikunjk $
 */


/**
 * Implementation of hook_init().
 */
function gsa_follow_init() {
  drupal_add_js(drupal_get_path('module', 'gsa_follow') . '/gsa_follow.js');
}


/**
 * Implementation of hook_menu().
 */
function gsa_follow_menu() {
  $items = array();
  
  $items['follow-content/%'] = array(
      'title' => 'Follow',
      'description' => 'Follow Content.',
      'page callback' => 'gsa_follow_follow_content',
      'page arguments' => array(1),
      'access arguments' => array('follow content'),
      'type' => MENU_CALLBACK,
  );
  
  $items['unfollow-content/%'] = array(
      'title' => 'Un-follow',
      'description' => 'Un-follow Content.',
      'page callback' => 'gsa_follow_unfollow_content',
      'page arguments' => array(1),
      'access arguments' => array('follow content'),
      'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/follow-settings'] = array(
      'title' => 'GSA Follow Settings',
      'page callback' => 'gsa_follow_settings',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access administration pages'),
  );
  
  return $items;
}


/**
 * Implementation of hook_permission().
 */
function gsa_follow_permission() {
  return array(
    'follow content' => array(
      'title' => t('Follow/Un-Follow content'),
    ),
  );
}



/**
 * Implementation of hook_node_view_alter().
 */
function gsa_follow_node_view_alter(&$build) {
  $node = $build['#node'];
  if (user_is_logged_in() && user_access('follow content')) {
    global $user;
    if (gsa_follow_check_user_follows_content($user->uid, $node->nid)) {
      $build['links']['#links']['follow-content'] = array(
          'title' => t('unfollow'),
          'href' => 'unfollow-content/'. $node->nid,
          'html' => 1,
          'attributes' => array('class' => array('gsa-follow-content-anchor')),
      );
    } else {
      $build['links']['#links']['follow-content'] = array(
          'title' => t('follow'),
          'href' => 'follow-content/'. $node->nid,
          'html' => 1,
          'attributes' => array('class' => array('gsa-follow-content-anchor')),
      );
    }
  }

}


function gsa_follow_get_follow_link($nid) {
  global $user;
  if (user_is_anonymous() || !user_access('follow content')) return '';
  
  if (gsa_follow_check_user_follows_content($user->uid, $nid)) {
    return l(t('unfollow'), 'unfollow-content/'. $nid, array('attributes' => array('class' => 'gsa-follow-content-anchor')));
  } else {
    return l(t('follow'), 'follow-content/'. $nid, array('attributes' => array('class' => 'gsa-follow-content-anchor')));
  }
}



/**
 * Helper function to check if specified user follows specified content
 * @param unknown_type $uid
 * @param unknown_type $nid
 */
function gsa_follow_check_user_follows_content($uid, $nid) {
  return db_select('gsa_follow', 'f')
      ->fields('f', array('fid'))
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->countQuery()
      ->execute()
      ->fetchField();
}

/**
 * Returns array of nids followed by a user.
 * @param unknown_type $uid
 */
function gsa_follow_get_content_followed($uid) {
  $result = db_select('gsa_follow', 'f')
  ->fields('f', array('nid','created'))
  ->condition('uid', $uid)
  ->orderBy('created', 'desc')
  ->execute()
  ->fetchAll();
  
  $return = array();
  
  foreach ($result AS $row) {
    $return[$row->nid] = $row->created;
  }
  
  return $return;
}


function gsa_follow_get_followers($nid) {
  $result = db_select('gsa_follow', 'f')
  ->fields('f', array('uid','created'))
  ->condition('nid', $nid)
  ->orderBy('created', 'desc')
  ->execute()
  ->fetchAll();
  
  $return = array();
  
  foreach ($result AS $row) {
    $return[$row->uid] = $row->created;
  }
  
  return $return;
}

/**
 * @todo
 */
function gsa_follow_list_content_follower($node) {
  $comments = comment_get_thread($node, COMMENT_MODE_FLAT, 999999);
  if (!$comments) return array();
  
  $like_user_ids = array();
  
  foreach ($comments AS $cid) {
    $comment = comment_load($cid);

    $like_user_ids[$comment->uid] = isset($like_user_ids[$comment->uid]) ? $like_user_ids[$comment->uid] : 0;
    $like_user_ids[$comment->uid] += 10;
    
    $like_users_result = db_select('gsa_follow', 'lc')
    ->fields('lc', array('uid'))
    ->condition('cid', $cid)
    ->execute()
    ->fetchAll();
    
    foreach ($like_users_result AS $like) {
      $like_user_ids[$like->uid] = isset($like_user_ids[$like->uid]) ? $like_user_ids[$like->uid] : 0;
      $like_user_ids[$like->uid] += 1;
    }
  }
  
  return $like_user_ids;
}


/**
 * Menu callback for ['follow-content/%']
 */
function gsa_follow_follow_content($nid) {
  $node = node_load($nid);
  if (user_access('follow content') && $node->nid) {
    global $user;

    if (!gsa_follow_check_user_follows_content($user->uid, $nid)) {
      $fid = db_insert('gsa_follow')
      ->fields(array(
          'uid' => $user->uid,
          'nid' => $nid,
          'created' => time(),
      ))
      ->execute();
    }
    
    $type = node_type_load($node->type);
    
    $data['message_id'] = 'heartbeat_follow_content';
    $data['variables']['!title'] = l($node->title, 'node/' . $node->nid);
    $data['variables']['!type'] = $type->name;
    $data['variables']['!username'] = l($user->name, 'user/' . $user->uid);
    $data['nid'] = $nid;
    $data['uid'] = $user->uid;
    $data['access'] = HEARTBEAT_PUBLIC_TO_ALL;
    
    heartbeat_log($data, $data['variables']);
    
    // sending mail if setting is set to yes for sending mail on unfollow.
    if (variable_get('gsa_follow_send_mail') == 1){
      gsa_follow_send_mail_on_follow($nid,$user);
    }
    
    
    $return['href'] = url('unfollow-content/'. $nid);
    $return['html'] = t('unfollow');
    print json_encode($return);
  }
  exit;
}


/**
 * Menu callback for ['unfollow-content/%']
 */
function gsa_follow_unfollow_content($nid) {
  if (user_access('follow content')) {
    global $user;
    db_delete('gsa_follow')
      ->condition('uid', $user->uid)
      ->condition('nid', $nid)
      ->execute();
    
    // sending mail if setting is set to yes for sending mail on unlfollow.
    if (variable_get('gsa_follow_send_mail') == 1){
      gsa_follow_send_mail_on_unfollow($nid,$user);
    }
    
    $return['href'] = url('follow-content/'. $nid);
    $return['html'] = t('follow');
    print json_encode($return);
  }
}


function gsa_follow_settings(){
  return drupal_get_form('gsa_follow_settings_form');
}

function gsa_follow_settings_form($form_state){
  $form['gsa_follow_send_mail'] = array(
      '#type' => 'select',
      '#title' => t('Send Mail'),
      '#options' => array(
          0 => t('No'),
          1 => t('Yes'),
      ),
      '#default_value' => variable_get('gsa_follow_send_mail', '0'),
      '#description' => t('Send mail on Follow & unfollow.'),
  );

  return system_settings_form($form);
}


/**
 * Implementtion of hook_mail().
 */
function gsa_follow_mail($key, &$message, $params) {
  if ($key == 'follow_the_content' || $key == 'unfollow_the_content') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
  }
}

/**
 * Implements hook_mail_alter().
 */
function gsa_follow_mail_alter(&$message) {
  if ($message['params']['type'] == 'follow-content') {
    $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/plain; charset=UTF-8; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
    );
    foreach ($headers as $key => $value) {
      $message['headers'][$key] = $value;
    }
  }
}


/**
 * Function callback to send email on follow the content.
 * @param unknown_type $cid
 * @param unknown_type $user
 */
function gsa_follow_send_mail_on_follow($nid, $user){
  global $language,$base_url;
  $node = node_load($nid);
  $group_authors_mail = array();
  foreach ($node->group_audience['und'] as $key => $value){
    $og = og_load($value['gid']);
    $group_node = node_load($og->etid);
    $group_authors = user_load($group_node->uid);
    $group_authors_mail[$value['gid']] = $group_authors->mail;
  }

  $follow_by = $user->name; // User who like / unlike comment
  $category = 'follow_the_content';
  $body_message .= t('One of the content : ' . $node->title . '  from your group has been followed by the user ' . $follow_by . '.

          You can go directly using this link :') . $base_url . url('node/'. $node->nid) ;

  $params['type'] = 'follow-content';
  $params['subject'] = 'Content : '.$node->title.' has been followed by ' . $follow_by;
  $params['body'] = $body_message;
  foreach ($group_authors_mail as $kk => $vv){
    $author_mail = $vv;
    drupal_mail('gsa_follow', $category, $author_mail, $language, $params);
  }
}

/**
 * Function callback to send email on unfollow the content.
 * @param unknown_type $cid
 * @param unknown_type $user
 */
function gsa_follow_send_mail_on_unfollow($nid, $user){
  global $language, $base_url;
  $node = node_load($nid);
  $group_authors_mail = array();
  foreach ($node->group_audience['und'] as $key => $value){
    $og = og_load($value['gid']);
    $group_node = node_load($og->etid);
    $group_authors = user_load($group_node->uid);
    $group_authors_mail[$value['gid']] = $group_authors->mail;
  }

  $unfollow_by = $user->name; // User who like / unlike comment
  $category = 'unfollow_the_content';
  $body_message .= t('One of the content : ' .$node->title. '  from your group has been unfollowed by the user ' . $follow_by .'.
  
      You can go directly using this link :') . $base_url . url('node/' . $node->nid) ;

  $params['type'] = 'follow-content';
  $params['subject'] = 'Content : ' . $node->title . ' has been unfollowed by ' . $unfollow_by;
  $params['body'] = $body_message;

  foreach ($group_authors_mail as $kk => $vv){
    $author_mail = $vv;
    drupal_mail('gsa_follow', $category, $author_mail, $language, $params);
  }
}
